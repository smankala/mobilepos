{"ts":1376268675425,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"var Connection = require('./connection').Connection,\n  ReadPreference = require('./read_preference').ReadPreference,\n  DbCommand = require('../commands/db_command').DbCommand,\n  MongoReply = require('../responses/mongo_reply').MongoReply,\n  ConnectionPool = require('./connection_pool').ConnectionPool,\n  EventEmitter = require('events').EventEmitter,\n  Base = require('./base').Base,\n  format = require('util').format,\n  utils = require('../utils'),\n  timers = require('timers'),\n  inherits = require('util').inherits;\n\n// Set processor, setImmediate if 0.10 otherwise nextTick\nvar processor = require('../utils').processor();\n\n/**\n * Class representing a single MongoDB Server connection\n *\n * Options\n *  - **readPreference** {String, default:null}, set's the read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST)\n *  - **ssl** {Boolean, default:false}, use ssl connection (needs to have a mongod server with ssl support)\n *  - **sslValidate** {Boolean, default:false}, validate mongod server certificate against ca (needs to have a mongod server with ssl support, 2.4 or higher)\n *  - **sslCA** {Array, default:null}, Array of valid certificates either as Buffers or Strings (needs to have a mongod server with ssl support, 2.4 or higher)\n *  - **sslCert** {Buffer/String, default:null}, String or buffer containing the certificate we wish to present (needs to have a mongod server with ssl support, 2.4 or higher)\n *  - **sslKey** {Buffer/String, default:null}, String or buffer containing the certificate private key we wish to present (needs to have a mongod server with ssl support, 2.4 or higher)\n *  - **sslPass** {Buffer/String, default:null}, String or buffer containing the certificate password (needs to have a mongod server with ssl support, 2.4 or higher)\n *  - **poolSize** {Number, default:5}, number of connections in the connection pool, set to 5 as default for legacy reasons.\n *  - **socketOptions** {Object, default:null}, an object containing socket options to use (noDelay:(boolean), keepAlive:(number), connectTimeoutMS:(number), socketTimeoutMS:(number))\n *  - **logger** {Object, default:null}, an object representing a logger that you want to use, needs to support functions debug, log, error **({error:function(message, object) {}, log:function(message, object) {}, debug:function(message, object) {}})**.\n *  - **auto_reconnect** {Boolean, default:false}, reconnect on error.\n *  - **disableDriverBSONSizeCheck** {Boolean, default:false}, force the server to error if the BSON message is to big\n *\n * @class Represents a Server connection.\n * @param {String} host the server host\n * @param {Number} port the server port\n * @param {Object} [options] optional options for insert command\n */\nfunction Server(host, port, options) {\n  // Set up Server instance\n  if(!(this instanceof Server)) return new Server(host, port, options);\n\n  // Set up event emitter\n  Base.call(this);\n\n  // Ensure correct values\n  if(port != null && typeof port == 'object') {\n    options = port;\n    port = Connection.DEFAULT_PORT;\n  }\n\n  var self = this;\n  this.host = host;\n  this.port = port;\n  this.options = options == null ? {} : options;\n  this.internalConnection;\n  this.internalMaster = false;\n  this.connected = false;  \n  this.poolSize = this.options.poolSize == null ? 5 : this.options.poolSize;\n  this.disableDriverBSONSizeCheck = this.options.disableDriverBSONSizeCheck != null ? this.options.disableDriverBSONSizeCheck : false;\n  this._used = false;\n  this.replicasetInstance = null;\n\n  // Emit open setup\n  this.emitOpen = this.options.emitOpen || true;\n  // Set ssl as connection method\n  this.ssl = this.options.ssl == null ? false : this.options.ssl;\n  // Set ssl validation\n  this.sslValidate = this.options.sslValidate == null ? false : this.options.sslValidate;\n  // Set the ssl certificate authority (array of Buffer/String keys)\n  this.sslCA = Array.isArray(this.options.sslCA) ? this.options.sslCA : null;\n  // Certificate to present to the server\n  this.sslCert = this.options.sslCert;\n  // Certificate private key if in separate file\n  this.sslKey = this.options.sslKey;\n  // Password to unlock private key\n  this.sslPass = this.options.sslPass;\n  // Set server name\n  this.name = format(\"%s:%s\", host, port);\n\n  // Ensure we are not trying to validate with no list of certificates\n  if(this.sslValidate && (!Array.isArray(this.sslCA) || this.sslCA.length == 0)) {\n    throw new Error(\"The driver expects an Array of CA certificates in the sslCA parameter when enabling sslValidate\");\n  }\n\n  // Get the readPreference\n  var readPreference = this.options['readPreference'];\n  // If readPreference is an object get the mode string\n  var validateReadPreference = readPreference != null && typeof readPreference == 'object' ? readPreference.mode : readPreference;\n  // Read preference setting\n  if(validateReadPreference != null) {\n    if(validateReadPreference != ReadPreference.PRIMARY && validateReadPreference != ReadPreference.SECONDARY && validateReadPreference != ReadPreference.NEAREST\n      && validateReadPreference != ReadPreference.SECONDARY_PREFERRED && validateReadPreference != ReadPreference.PRIMARY_PREFERRED) {\n        throw new Error(\"Illegal readPreference mode specified, \" + validateReadPreference);\n    }\n\n    // Set read Preference\n    this._readPreference = readPreference;\n  } else {\n    this._readPreference = null;\n  }\n\n  // Contains the isMaster information returned from the server\n  this.isMasterDoc;\n\n  // Set default connection pool options\n  this.socketOptions = this.options.socketOptions != null ? this.options.socketOptions : {};\n  if(this.disableDriverBSONSizeCheck) this.socketOptions.disableDriverBSONSizeCheck = this.disableDriverBSONSizeCheck;\n\n  // Set ssl up if it's defined\n  if(this.ssl) {\n    this.socketOptions.ssl = true;\n    // Set ssl validation\n    this.socketOptions.sslValidate = this.sslValidate == null ? false : this.sslValidate;\n    // Set the ssl certificate authority (array of Buffer/String keys)\n    this.socketOptions.sslCA = Array.isArray(this.sslCA) ? this.sslCA : null;\n    // Set certificate to present\n    this.socketOptions.sslCert = this.sslCert;\n    // Set certificate to present\n    this.socketOptions.sslKey = this.sslKey;\n    // Password to unlock private key\n    this.socketOptions.sslPass = this.sslPass;\n  }\n\n  // Set up logger if any set\n  this.logger = this.options.logger != null\n    && (typeof this.options.logger.debug == 'function')\n    && (typeof this.options.logger.error == 'function')\n    && (typeof this.options.logger.log == 'function')\n      ? this.options.logger : {error:function(message, object) {}, log:function(message, object) {}, debug:function(message, object) {}};\n\n  // Just keeps list of events we allow\n  this.eventHandlers = {error:[], parseError:[], poolReady:[], message:[], close:[], timeout:[]};\n  // Internal state of server connection\n  this._serverState = 'disconnected';\n  // Contains state information about server connection\n  this._state = {'runtimeStats': {'queryStats':new RunningStats()}};\n  // Do we record server stats or not\n  this.recordQueryStats = false;\n};\n\n/**\n * @ignore\n */\ninherits(Server, Base);\n\n//\n//  Deprecated, USE ReadPreferences class\n//\nServer.READ_PRIMARY = ReadPreference.PRIMARY;\nServer.READ_SECONDARY = ReadPreference.SECONDARY_PREFERRED;\nServer.READ_SECONDARY_ONLY = ReadPreference.SECONDARY;\n\n/**\n * Always ourselves\n * @ignore\n */\nServer.prototype.setReadPreference = function(readPreference) {\n  this._readPreference = readPreference;  \n}\n\n/**\n * @ignore\n */\nServer.prototype.isMongos = function() {\n  return this.isMasterDoc != null && this.isMasterDoc['msg'] == \"isdbgrid\" ? true : false;\n}\n\n/**\n * @ignore\n */\nServer.prototype._isUsed = function() {\n  return this._used;\n}\n\n/**\n * @ignore\n */\nServer.prototype.close = function(callback) {\n  // Set server status as disconnected\n  this._serverState = 'destroyed';\n  // Remove all local listeners\n  this.removeAllListeners();\n\n  if(this.connectionPool != null) {\n    // Remove all the listeners on the pool so it does not fire messages all over the place\n    this.connectionPool.removeAllEventListeners();\n    // Close the connection if it's open\n    this.connectionPool.stop(true);\n  }\n\n  // Emit close event\n  if(this.db && !this.isSetMember()) {\n    var self = this;\n    processor(function() {\n      self._emitAcrossAllDbInstances(self, null, \"close\", null, null, true)\n    })\n  }\n\n  // Peform callback if present\n  if(typeof callback === 'function') callback(null);\n};\n\nServer.prototype.isDestroyed = function() {\n  return this._serverState == 'destroyed';\n}\n\n/**\n * @ignore\n */\nServer.prototype.isConnected = function() {\n  return this.connectionPool != null && this.connectionPool.isConnected();\n}\n\n/**\n * @ignore\n */\nServer.prototype.canWrite = Server.prototype.isConnected;\nServer.prototype.canRead = Server.prototype.isConnected;\n\nServer.prototype.isAutoReconnect = function() {\n  if(this.isSetMember()) return false;\n  return this.options.auto_reconnect != null ? this.options.auto_reconnect : true;\n}\n\n/**\n * @ignore\n */\nServer.prototype.allServerInstances = function() {\n  return [this];\n}\n\n/**\n * @ignore\n */\nServer.prototype.isSetMember = function() {\n  return this.replicasetInstance != null || this.mongosInstance != null;\n}\n\n/**\n * Assigns a replica set to this `server`.\n *\n * @param {ReplSet} replset\n * @ignore\n */\nServer.prototype.assignReplicaSet = function (replset) {\n  this.replicasetInstance = replset;\n  this.inheritReplSetOptionsFrom(replset);\n  this.enableRecordQueryStats(replset.recordQueryStats);\n}\n\n/**\n * Takes needed options from `replset` and overwrites\n * our own options.\n *\n * @param {ReplSet} replset\n * @ignore\n */\nServer.prototype.inheritReplSetOptionsFrom = function (replset) {\n  this.socketOptions = {};\n  this.socketOptions.connectTimeoutMS = replset.options.socketOptions.connectTimeoutMS || 30000;\n\n  if(replset.options.ssl) {\n    // Set ssl on\n    this.socketOptions.ssl = true;\n    // Set ssl validation\n    this.socketOptions.sslValidate = replset.options.sslValidate == null ? false : replset.options.sslValidate;\n    // Set the ssl certificate authority (array of Buffer/String keys)\n    this.socketOptions.sslCA = Array.isArray(replset.options.sslCA) ? replset.options.sslCA : null;\n    // Set certificate to present\n    this.socketOptions.sslCert = replset.options.sslCert;\n    // Set certificate to present\n    this.socketOptions.sslKey = replset.options.sslKey;\n    // Password to unlock private key\n    this.socketOptions.sslPass = replset.options.sslPass;\n  }\n\n  // If a socket option object exists clone it\n  if(utils.isObject(replset.options.socketOptions)) {\n    var keys = Object.keys(replset.options.socketOptions);\n    for(var i = 0; i < keys.length; i++)\n      this.socketOptions[keys[i]] = replset.options.socketOptions[keys[i]];\n  }\n}\n\n/**\n * Opens this server connection.\n *\n * @ignore\n */\nServer.prototype.connect = function(dbInstance, options, callback) {\n  if('function' === typeof options) callback = options, options = {};\n  if(options == null) options = {};\n  if(!('function' === typeof callback)) callback = null;\n  var self = this;\n  // Save the options\n  this.options = options;\n\n  // Currently needed to work around problems with multiple connections in a pool with ssl\n  // TODO fix if possible\n  if(this.ssl == true) {\n    // Set up socket options for ssl\n    this.socketOptions.ssl = true;\n    // Set ssl validation\n    this.socketOptions.sslValidate = this.sslValidate == null ? false : this.sslValidate;\n    // Set the ssl certificate authority (array of Buffer/String keys)\n    this.socketOptions.sslCA = Array.isArray(this.sslCA) ? this.sslCA : null;\n    // Set certificate to present\n    this.socketOptions.sslCert = this.sslCert;\n    // Set certificate to present\n    this.socketOptions.sslKey = this.sslKey;\n    // Password to unlock private key\n    this.socketOptions.sslPass = this.sslPass;\n  }\n\n  // Let's connect\n  var server = this;\n  // Let's us override the main receiver of events\n  var eventReceiver = options.eventReceiver != null ? options.eventReceiver : this;\n  // Save reference to dbInstance\n  this.db = dbInstance;  // `db` property matches ReplSet and Mongos\n  this.dbInstances = [dbInstance];\n\n  // Force connection pool if there is one\n  if(server.connectionPool) server.connectionPool.stop();\n  // Set server state to connecting\n  this._serverState = 'connecting';\n\n  if(server.connectionPool != null) {\n    // Remove all the listeners on the pool so it does not fire messages all over the place\n    this.connectionPool.removeAllEventListeners();\n    // Close the connection if it's open\n    this.connectionPool.stop(true);    \n  }\n\n  this.connectionPool = new ConnectionPool(this.host, this.port, this.poolSize, dbInstance.bson, this.socketOptions);\n  var connectionPool = this.connectionPool;\n  // If ssl is not enabled don't wait between the pool connections\n  if(this.ssl == null || !this.ssl) connectionPool._timeToWait = null;\n  // Set logger on pool\n  connectionPool.logger = this.logger;\n  connectionPool.bson = dbInstance.bson;\n\n  // Set basic parameters passed in\n  var returnIsMasterResults = options.returnIsMasterResults == null ? false : options.returnIsMasterResults;\n\n  // Create a default connect handler, overriden when using replicasets\n  var connectCallback = function(_server) {\n    return function(err, reply) {  \n      // ensure no callbacks get called twice\n      var internalCallback = callback;\n      callback = null;\n      \n      // Assign the server\n      _server = _server != null ? _server : server;\n      \n      // If something close down the connection and removed the callback before\n      // proxy killed connection etc, ignore the erorr as close event was isssued\n      if(err != null && internalCallback == null) return;\n      // Internal callback\n      if(err != null) return internalCallback(err, null, _server);\n      _server.master = reply.documents[0].ismaster == 1 ? true : false;\n      _server.connectionPool.setMaxBsonSize(reply.documents[0].maxBsonObjectSize);\n      _server.connectionPool.setMaxMessageSizeBytes(reply.documents[0].maxMessageSizeBytes);\n      // Set server state to connEcted\n      _server._serverState = 'connected';\n      // Set server as connected\n      _server.connected = true;\n      // Save document returned so we can query it\n      _server.isMasterDoc = reply.documents[0];\n      \n      if(self.emitOpen)\n        _server._emitAcrossAllDbInstances(_server, eventReceiver, \"open\", null, returnIsMasterResults ? reply : null, null);        \n\n      // If we have it set to returnIsMasterResults\n      if(returnIsMasterResults) {\n        internalCallback(null, reply, _server);\n      } else {\n        internalCallback(null, dbInstance, _server);\n      }\n    }\n  };\n\n  // Let's us override the main connect callback\n  var connectHandler = options.connectHandler == null ? connectCallback(server) : options.connectHandler;\n\n  // Set up on connect method\n  connectionPool.on(\"poolReady\", function() {\n    // Create db command and Add the callback to the list of callbacks by the request id (mapping outgoing messages to correct callbacks)\n    var db_command = DbCommand.NcreateIsMasterCommand(dbInstance, dbInstance.databaseName);\n    // Check out a reader from the pool\n    var connection = connectionPool.checkoutConnection();\n    // Register handler for messages\n    server._registerHandler(db_command, false, connection, connectHandler);\n    // Write the command out\n    connection.write(db_command);\n  })\n\n  // Set up item connection\n  connectionPool.on(\"message\", function(message) {\n    // Attempt to parse the message\n    try {\n      // Create a new mongo reply\n      var mongoReply = new MongoReply()\n      // Parse the header\n      mongoReply.parseHeader(message, connectionPool.bson)\n\n      // If message size is not the same as the buffer size\n      // something went terribly wrong somewhere\n      if(mongoReply.messageLength != message.length) {\n        // Emit the error\n        if(eventReceiver.listeners(\"error\") && eventReceiver.listeners(\"error\").length > 0) eventReceiver.emit(\"error\", new Error(\"bson length is different from message length\"), server);\n        // Remove all listeners\n        server.removeAllListeners();\n      } else {\n        var startDate = new Date().getTime();\n\n        // Callback instance\n        var callbackInfo = server._findHandler(mongoReply.responseTo.toString());\n\n        // The command executed another request, log the handler again under that request id\n        if(mongoReply.requestId > 0 && mongoReply.cursorId.toString() != \"0\" \n          && callbackInfo && callbackInfo.info && callbackInfo.info.exhaust) {\n            server._reRegisterHandler(mongoReply.requestId, callbackInfo);\n        }\n        // Parse the body\n        mongoReply.parseBody(message, connectionPool.bson, callbackInfo.info.raw, function(err) {\n          if(err != null) {\n            // If pool connection is already closed\n            if(server._serverState === 'disconnected') return;\n            // Set server state to disconnected\n            server._serverState = 'disconnected';\n            // Remove all listeners and close the connection pool\n            server.removeAllListeners();\n            connectionPool.stop(true);\n\n            // If we have a callback return the error\n            if(typeof callback === 'function') {\n              // ensure no callbacks get called twice\n              var internalCallback = callback;\n              callback = null;\n              // Perform callback\n              internalCallback(new Error(\"connection closed due to parseError\"), null, server);\n            } else if(server.isSetMember()) {\n              if(server.listeners(\"parseError\") && server.listeners(\"parseError\").length > 0) server.emit(\"parseError\", new Error(\"connection closed due to parseError\"), server);\n            } else {\n              if(eventReceiver.listeners(\"parseError\") && eventReceiver.listeners(\"parseError\").length > 0) eventReceiver.emit(\"parseError\", new Error(\"connection closed due to parseError\"), server);\n            }\n\n            // If we are a single server connection fire errors correctly\n            if(!server.isSetMember()) {\n              // Fire all callback errors\n              server.__executeAllCallbacksWithError(new Error(\"connection closed due to parseError\"));\n              // Emit error\n              server._emitAcrossAllDbInstances(server, eventReceiver, \"parseError\", server, null, true);\n            }\n            // Short cut\n            return;\n          }\n\n          // Let's record the stats info if it's enabled\n          if(server.recordQueryStats == true && server._state['runtimeStats'] != null\n            && server._state.runtimeStats['queryStats'] instanceof RunningStats) {\n            // Add data point to the running statistics object\n            server._state.runtimeStats.queryStats.push(new Date().getTime() - callbackInfo.info.start);\n          }\n\n          // Dispatch the call\n          server._callHandler(mongoReply.responseTo, mongoReply, null);\n\n          // If we have an error about the server not being master or primary\n          if((mongoReply.responseFlag & (1 << 1)) != 0\n            && mongoReply.documents[0].code\n            && mongoReply.documents[0].code == 13436) {\n              server.close();\n          }\n        });\n      }\n    } catch (err) {\n      // Throw error in next tick\n      processor(function() {\n        throw err;\n      })\n    }\n  });\n\n  // Handle timeout\n  connectionPool.on(\"timeout\", function(err) {\n    // If pool connection is already closed\n    if(server._serverState === 'disconnected' \n      || server._serverState === 'destroyed') return;\n    // Set server state to disconnected\n    server._serverState = 'disconnected';\n    // If we have a callback return the error\n    if(typeof callback === 'function') {\n      // ensure no callbacks get called twice\n      var internalCallback = callback;\n      callback = null;\n      // Perform callback\n      internalCallback(err, null, server);\n    } else if(server.isSetMember()) {\n      if(server.listeners(\"timeout\") && server.listeners(\"timeout\").length > 0) server.emit(\"timeout\", err, server);\n    } else {\n      if(eventReceiver.listeners(\"timeout\") && eventReceiver.listeners(\"timeout\").length > 0) eventReceiver.emit(\"timeout\", err, server);\n    }\n\n    // If we are a single server connection fire errors correctly\n    if(!server.isSetMember()) {\n      // Fire all callback errors\n      server.__executeAllCallbacksWithError(err);\n      // Emit error\n      server._emitAcrossAllDbInstances(server, eventReceiver, \"timeout\", err, server, true);\n    }\n\n    // If we have autoConnect enabled let's fire up an attempt to reconnect\n    if(server.isAutoReconnect() \n      && !server.isSetMember()\n      && (server._serverState != 'destroyed')\n      && !server._reconnectInProgreess) {\n      // Set the number of retries\n      server._reconnect_retries = server.db.numberOfRetries;\n      // Attempt reconnect\n      server._reconnectInProgreess = true;\n      setTimeout(__attemptReconnect(server), server.db.retryMiliSeconds);\n    }    \n  });\n\n  // Handle errors\n  connectionPool.on(\"error\", function(message, connection, error_options) {\n    // If pool connection is already closed\n    if(server._serverState === 'disconnected' \n      || server._serverState === 'destroyed') return;\n    \n    // Set server state to disconnected\n    server._serverState = 'disconnected';\n    // Error message\n    var error_message = new Error(message && message.err ? message.err : message);\n    // Error message coming from ssl\n    if(error_options && error_options.ssl) error_message.ssl = true;\n\n    // If we have a callback return the error\n    if(typeof callback === 'function') {\n      // ensure no callbacks get called twice\n      var internalCallback = callback;\n      callback = null;\n      // Perform callback\n      internalCallback(error_message, null, server);\n    } else if(server.isSetMember()) {\n      if(server.listeners(\"error\") && server.listeners(\"error\").length > 0) server.emit(\"error\", error_message, server);\n    } else {\n      if(eventReceiver.listeners(\"error\") && eventReceiver.listeners(\"error\").length > 0) eventReceiver.emit(\"error\", error_message, server);\n    }\n\n    // If we are a single server connection fire errors correctly\n    if(!server.isSetMember()) {\n      // Fire all callback errors\n      server.__executeAllCallbacksWithError(error_message);\n      // Emit error\n      server._emitAcrossAllDbInstances(server, eventReceiver, \"error\", error_message, server, true);\n    }\n\n    // If we have autoConnect enabled let's fire up an attempt to reconnect\n    if(server.isAutoReconnect() \n      && !server.isSetMember()\n      && (server._serverState != 'destroyed')\n      && !server._reconnectInProgreess) {\n\n      // Set the number of retries\n      server._reconnect_retries = server.db.numberOfRetries;\n      // Attempt reconnect\n      server._reconnectInProgreess = true;\n      setTimeout(__attemptReconnect(server), server.db.retryMiliSeconds);\n    }    \n  });\n\n  // Handle close events\n  connectionPool.on(\"close\", function() {\n    // If pool connection is already closed\n    if(server._serverState === 'disconnected' \n      || server._serverState === 'destroyed') return;\n    // Set server state to disconnected\n    server._serverState = 'disconnected';\n    // If we have a callback return the error\n    if(typeof callback == 'function') {\n      // ensure no callbacks get called twice\n      var internalCallback = callback;\n      callback = null;\n      // Perform callback\n      internalCallback(new Error(\"connection closed\"), null, server);\n    } else if(server.isSetMember()) {\n      if(server.listeners(\"close\") && server.listeners(\"close\").length > 0) server.emit(\"close\", new Error(\"connection closed\"), server);\n    } else {\n      if(eventReceiver.listeners(\"close\") && eventReceiver.listeners(\"close\").length > 0) eventReceiver.emit(\"close\", new Error(\"connection closed\"), server);\n    }\n\n    // If we are a single server connection fire errors correctly\n    if(!server.isSetMember()) {\n      // Fire all callback errors\n      server.__executeAllCallbacksWithError(new Error(\"connection closed\"));\n      // Emit error\n      server._emitAcrossAllDbInstances(server, eventReceiver, \"close\", server, null, true);\n    }\n\n    // If we have autoConnect enabled let's fire up an attempt to reconnect\n    if(server.isAutoReconnect() \n      && !server.isSetMember()\n      && (server._serverState != 'destroyed')\n      && !server._reconnectInProgreess) {\n\n      // Set the number of retries\n      server._reconnect_retries = server.db.numberOfRetries;  \n      // Attempt reconnect\n      server._reconnectInProgreess = true;\n      setTimeout(__attemptReconnect(server), server.db.retryMiliSeconds);\n    }    \n  });\n\n  /**\n   * @ignore\n   */\n  var __attemptReconnect = function(server) {\n    return function() {\n      // Attempt reconnect\n      server.connect(server.db, server.options, function(err, result) {\n        server._reconnect_retries = server._reconnect_retries - 1;\n\n        if(err) {\n          // Retry\n          if(server._reconnect_retries == 0 || server._serverState == 'destroyed') {\n            server._serverState = 'connected';\n            server._reconnectInProgreess = false\n            // Fire all callback errors\n            return server.__executeAllCallbacksWithError(new Error(\"failed to reconnect to server\"));\n          } else {\n            return setTimeout(__attemptReconnect(server), server.db.retryMiliSeconds);\n          }\n        } else {\n          // Set as authenticating (isConnected will be false)\n          server._serverState = 'authenticating';\n          // Apply any auths, we don't try to catch any errors here\n          // as there are nowhere to simply propagate them to\n          self._apply_auths(server.db, function(err, result) {            \n            server._serverState = 'connected';\n            server._reconnectInProgreess = false;\n            server._commandsStore.execute_queries();\n            server._commandsStore.execute_writes();\n          });\n        } \n      });      \n    }\n  }\n\n  // If we have a parser error we are in an unknown state, close everything and emit\n  // error\n  connectionPool.on(\"parseError\", function(message) {\n    // If pool connection is already closed\n    if(server._serverState === 'disconnected' \n      || server._serverState === 'destroyed') return;\n    // Set server state to disconnected\n    server._serverState = 'disconnected';\n    // If we have a callback return the error\n    if(typeof callback === 'function') {\n      // ensure no callbacks get called twice\n      var internalCallback = callback;\n      callback = null;\n      // Perform callback\n      internalCallback(new Error(\"connection closed due to parseError\"), null, server);\n    } else if(server.isSetMember()) {\n      if(server.listeners(\"parseError\") && server.listeners(\"parseError\").length > 0) server.emit(\"parseError\", new Error(\"connection closed due to parseError\"), server);\n    } else {\n      if(eventReceiver.listeners(\"parseError\") && eventReceiver.listeners(\"parseError\").length > 0) eventReceiver.emit(\"parseError\", new Error(\"connection closed due to parseError\"), server);\n    }\n\n    // If we are a single server connection fire errors correctly\n    if(!server.isSetMember()) {\n      // Fire all callback errors\n      server.__executeAllCallbacksWithError(new Error(\"connection closed due to parseError\"));\n      // Emit error\n      server._emitAcrossAllDbInstances(server, eventReceiver, \"parseError\", server, null, true);\n    }\n  });\n\n  // Boot up connection poole, pass in a locator of callbacks\n  connectionPool.start();\n}\n\n/**\n * @ignore\n */\nServer.prototype.allRawConnections = function() {\n  return this.connectionPool.getAllConnections();\n}\n\n/**\n * Check if a writer can be provided\n * @ignore\n */\nvar canCheckoutWriter = function(self, read) {\n  // We cannot write to an arbiter or secondary server\n  if(self.isMasterDoc && self.isMasterDoc['arbiterOnly'] == true) {\n    return new Error(\"Cannot write to an arbiter\");\n  } if(self.isMasterDoc && self.isMasterDoc['secondary'] == true) {\n    return new Error(\"Cannot write to a secondary\");\n  } else if(read == true && self._readPreference == ReadPreference.SECONDARY && self.isMasterDoc && self.isMasterDoc['ismaster'] == true) {\n    return new Error(\"Cannot read from primary when secondary only specified\");\n  } else if(!self.isMasterDoc) {\n    return new Error(\"Cannot determine state of server\");\n  }\n\n  // Return no error\n  return null;\n}\n\n/**\n * @ignore\n */\nServer.prototype.checkoutWriter = function(read) {\n  if(read == true) return this.connectionPool.checkoutConnection();\n  // Check if are allowed to do a checkout (if we try to use an arbiter f.ex)\n  var result = canCheckoutWriter(this, read);\n  // If the result is null check out a writer\n  if(result == null && this.connectionPool != null) {\n    return this.connectionPool.checkoutConnection();\n  } else if(result == null) {\n    return null;\n  } else {\n    return result;\n  }\n}\n\n/**\n * Check if a reader can be provided\n * @ignore\n */\nvar canCheckoutReader = function(self) {\n  // We cannot write to an arbiter or secondary server\n  if(self.isMasterDoc && self.isMasterDoc['arbiterOnly'] == true) {\n    return new Error(\"Cannot write to an arbiter\");\n  } else if(self._readPreference != null) {\n    // If the read preference is Primary and the instance is not a master return an error\n    if((self._readPreference == ReadPreference.PRIMARY) && self.isMasterDoc && self.isMasterDoc['ismaster'] != true) {\n      return new Error(\"Read preference is Server.PRIMARY and server is not master\");\n    } else if(self._readPreference == ReadPreference.SECONDARY && self.isMasterDoc && self.isMasterDoc['ismaster'] == true) {\n      return new Error(\"Cannot read from primary when secondary only specified\");\n    }\n  } else if(!self.isMasterDoc) {\n    return new Error(\"Cannot determine state of server\");\n  }\n\n  // Return no error\n  return null;\n}\n\n/**\n * @ignore\n */\nServer.prototype.checkoutReader = function(read) {\n  // Check if are allowed to do a checkout (if we try to use an arbiter f.ex)\n  var result = canCheckoutReader(this);\n  // If the result is null check out a writer\n  if(result == null && this.connectionPool != null) {\n    return this.connectionPool.checkoutConnection();\n  } else if(result == null) {\n    return null;\n  } else {\n    return result;\n  }\n}\n\n/**\n * @ignore\n */\nServer.prototype.enableRecordQueryStats = function(enable) {\n  this.recordQueryStats = enable;\n}\n\n/**\n * Internal statistics object used for calculating average and standard devitation on\n * running queries\n * @ignore\n */\nvar RunningStats = function() {\n  var self = this;\n  this.m_n = 0;\n  this.m_oldM = 0.0;\n  this.m_oldS = 0.0;\n  this.m_newM = 0.0;\n  this.m_newS = 0.0;\n\n  // Define getters\n  Object.defineProperty(this, \"numDataValues\", { enumerable: true\n    , get: function () { return this.m_n; }\n  });\n\n  Object.defineProperty(this, \"mean\", { enumerable: true\n    , get: function () { return (this.m_n > 0) ? this.m_newM : 0.0; }\n  });\n\n  Object.defineProperty(this, \"variance\", { enumerable: true\n    , get: function () { return ((this.m_n > 1) ? this.m_newS/(this.m_n - 1) : 0.0); }\n  });\n\n  Object.defineProperty(this, \"standardDeviation\", { enumerable: true\n    , get: function () { return Math.sqrt(this.variance); }\n  });\n\n  Object.defineProperty(this, \"sScore\", { enumerable: true\n    , get: function () {\n      var bottom = this.mean + this.standardDeviation;\n      if(bottom == 0) return 0;\n      return ((2 * this.mean * this.standardDeviation)/(bottom));\n    }\n  });\n}\n\n/**\n * @ignore\n */\nRunningStats.prototype.push = function(x) {\n  // Update the number of samples\n  this.m_n = this.m_n + 1;\n  // See Knuth TAOCP vol 2, 3rd edition, page 232\n  if(this.m_n == 1) {\n    this.m_oldM = this.m_newM = x;\n    this.m_oldS = 0.0;\n  } else {\n    this.m_newM = this.m_oldM + (x - this.m_oldM) / this.m_n;\n    this.m_newS = this.m_oldS + (x - this.m_oldM) * (x - this.m_newM);\n\n    // set up for next iteration\n    this.m_oldM = this.m_newM;\n    this.m_oldS = this.m_newS;\n  }\n}\n\n/**\n * @ignore\n */\nObject.defineProperty(Server.prototype, \"autoReconnect\", { enumerable: true\n  , get: function () {\n      return this.options['auto_reconnect'] == null ? false : this.options['auto_reconnect'];\n    }\n});\n\n/**\n * @ignore\n */\nObject.defineProperty(Server.prototype, \"connection\", { enumerable: true\n  , get: function () {\n      return this.internalConnection;\n    }\n  , set: function(connection) {\n      this.internalConnection = connection;\n    }\n});\n\n/**\n * @ignore\n */\nObject.defineProperty(Server.prototype, \"master\", { enumerable: true\n  , get: function () {\n      return this.internalMaster;\n    }\n  , set: function(value) {\n      this.internalMaster = value;\n    }\n});\n\n/**\n * @ignore\n */\nObject.defineProperty(Server.prototype, \"primary\", { enumerable: true\n  , get: function () {\n      return this;\n    }\n});\n\n/**\n * Getter for query Stats\n * @ignore\n */\nObject.defineProperty(Server.prototype, \"queryStats\", { enumerable: true\n  , get: function () {\n      return this._state.runtimeStats.queryStats;\n    }\n});\n\n/**\n * @ignore\n */\nObject.defineProperty(Server.prototype, \"runtimeStats\", { enumerable: true\n  , get: function () {\n      return this._state.runtimeStats;\n    }\n});\n\n/**\n * Get Read Preference method\n * @ignore\n */\nObject.defineProperty(Server.prototype, \"readPreference\", { enumerable: true\n  , get: function () {\n      if(this._readPreference == null && this.readSecondary) {\n        return Server.READ_SECONDARY;\n      } else if(this._readPreference == null && !this.readSecondary) {\n        return Server.READ_PRIMARY;\n      } else {\n        return this._readPreference;\n      }\n    }\n});\n\n/**\n * @ignore\n */\nexports.Server = Server;\n"]],"start1":0,"start2":0,"length1":0,"length2":33967}]],"length":33967}
